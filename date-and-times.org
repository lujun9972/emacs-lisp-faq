#+TITLE: date-and-times
#+AUTHOR: DarkSun
#+CATEGORY: emacs-lisp-faq
#+DATE: [2016-01-29 周五 11:39]
#+OPTIONS: ^:{}

emacs lisp中的时间表示与其他语言相比很不一样,它是一个由4个整型数字组成的list来表示的:
#+BEGIN_SRC emacs-lisp
  (高位秒数 低位秒数 微秒数 皮秒数)
#+END_SRC
其中微秒数和皮秒数都是可以忽略的. 而高位秒数*(2^16)+低位秒数 即为从(1970年1月1日0:00)开始累加的秒数.


* 获取当前时间
使用 =(curent-time)= 可以获取到当前时间. 该函数使用4个整型数字组成的list来表示: =(高位秒数 低位秒数 微秒数 皮秒数)=
#+BEGIN_SRC emacs-lisp
  (current-time)                          ; (22190 51991 416901 400000)
#+END_SRC

若希望获得类似其他语言中的那种直接使用数字的时间表示方法,则需要使用函数 =(float-time &optional time-value)=. 
该函数返回一个浮点数,表示自(1970年1月1日0:00)开始后累计的秒数. 
若time-value省略则表示返回当前时间的秒数.
#+BEGIN_SRC emacs-lisp
  (float-time)                             ;1454296064.0392067
  (float-time '(22190 51991 46901 400000)) ;1454295831.0469015
#+END_SRC

若希望获得人能够识别的时间格式,则可以使用函数 =(current-time-string &optional time-value)=
该函数返回一个人能够识别的字符串,且 *该字符串的格式是不变的,各个域的位置也是固定的*,因此完全可以使用`substring'函数从中截取内容
#+BEGIN_SRC emacs-lisp
  (current-time-string)                             ;Mon Feb  1 11:13:00 2016
  (current-time-string '(22190 51991 46901 400000)) ;Mon Feb  1 11:03:51 2016
#+END_SRC

* 从时间中抽取年,月,日,时,分,秒,周,是否夏时令,时区信息
=(decode-time &optional time)= 可以解析时间,并从中获取年,月,日,时,分,秒,周,是否夏时令,时区信息
其返回值的格式为 =(秒 分 时 日 月 年 周 是否夏时令 时区)=
#+BEGIN_SRC emacs-lisp
  (decode-time)                             ;(51 23 11 1 2 2016 1 nil 28800)
  (decode-time '(22190 51991 46901 400000)) ;(51 3 11 1 2 2016 1 nil 28800)
#+END_SRC

* 格式化时间的输出
使用 =(format-time-string format-string &optional time universal)= 可格式化输出时间.
其中FORMAT-STRING指定了输出的格式, TIME为elisp格式的时间,默认为当前时间.

FORMAT-STRING中包含了很多"%x"的转义字符,其意义如下:
| %a | 周几的缩写                                                                           |
| %A | 周几的全称                                                                           |
| %b | 月份的缩写                                                                           |
| %B | 月份的全称                                                                           |
| %c | 相当于"%x %X"                                                                        |
| %C | 每个不同的区域设计有不同的意义,对于默认的区域(名为C的区域)来说,它相当于'%A %B %e,%Y' |
| %d | 0扩展的日信息                                                                        |
| %D | 相当于"%m/%d//%y"                                                                    |
| %e | 空格扩展的日信息                                                                     |
| %h | 相当于"%b"                                                                           |
| %H | 24进制小时信息(00-23)                                                                |
| %I | 12进制小时信息(01-12)                                                                |
| %j | 今年过去了多少天(001-366)                                                            |
| %k | 空格扩展的24进制小时(0-23)                                                           |
| %l | 空格扩展的12进制小时(01-12)                                                          |
| %M | 分钟数(00-59)                                                                        |
| %n | 回车符                                                                               |
| %p | AM或者PM                                                                             |
| %r | 相当于"%I:%M:%S %p"                                                                  |
| %E | 相当于"%H:%M"                                                                        |
| %S | 秒钟数(00-59)                                                                        |
| %t | tab键                                                                                |
| %T | 相当于"%H:%M:%s"                                                                      |
| %w | 周几的信息(0-6).其中0表示周日                                                          |
| %W | 今年的第几个周(01-52),其中认为 *周一为一周的开始*                                       |
| %x | 不同的区域有不同的意义,在默认的区域(名为C的区域),它相当于"%D"                             |
| %X | 不同的区域有不同的意义,在默认的区域(名为C的区域),它相当于"%T"                               |
| %y | 年的后两位(00-99)                                                                            |
| %Y | 年                                                                                           |
| %z | 时区的偏移量,如"-0500"                                                                        |
| %Z | 时区的缩写,如"EST"                                                                                  |
#+BEGIN_SRC emacs-lisp
  (format-time-string "%D %r")                             ;"02/01/16 11:53:23"
  (format-time-string "%D %r" '(22190 51991 46901 400000)) ;"02/01/16 11:03:51"
#+END_SRC


若时间是由纯数字表示的,则需要使用 =(format-seconds format-string seconds)= 来格式化输出

这里format-string中也包含"%x"的转义字符,其意义如下:
| %y | 从纪元开始经过多少年                                                                  |
| %Y |                                                                              |
|----+------------------------------------------------------------------------------|
| %d | 经过多少天                                                                       |
| %D |                                                                              |
|----+------------------------------------------------------------------------------|
| %h | 经过多少小时                                                                      |
| %H |                                                                              |
|----+------------------------------------------------------------------------------|
| %m | 经过多少分                                                                       |
| %M |                                                                              |
|----+------------------------------------------------------------------------------|
| %s | 经过多少秒                                                                       |
| %S |                                                                              |
|----+------------------------------------------------------------------------------|
| %% | %                                                                            |
|----+------------------------------------------------------------------------------|
| %z | 该标志本身无输出,但使用该标志的情况下,其他标志必须依照从大到小的时间单位排序 |
|    | elisp从左向右扫描%z左边的标志,在遇到第一个不为0的值之前不输出.               |
|    | %z后的标志,肯定输出                                                                  |

其中大写的字母表示即输出数字,也输出单位. 而小些的字母只输出数字.
#+BEGIN_SRC emacs-lisp
  (format-seconds "%Y %% %D \n %h %m " (float-time))
  ;; "46 years % 12469 days 
  ;;  298279 17895710 "
#+END_SRC

* 创建时间对象
使用 =(encode-time seconds minutes hour day month year &optional zone)= 可以创建表示特定时间的时间对象
#+BEGIN_SRC emacs-lisp
  (encode-time 1 0 0 1 1 1970 t)          ;(0 1)
#+END_SRC
其中最后的参数zone可以为
+ t表示Universal Time
+ TZ环境变量的字符串
+ 从 =(current-time-zone)= 返回的list
+ 从 =(decode-time)= 返回的整数

*encode-time可以接受超过7个的参数,前1到6个参数依次表示秒,分,时,日,月,年. 最后那个参数表示时区,其他参数被忽略*


如果想从一个时间的字符串中解析出时间对象,可以使用 =(date-to-time time-string)= 若time-string中缺少时区信息,则使用GMT
#+BEGIN_SRC emacs-lisp
  (date-to-time "2016-02-10 17:09:10")    ; (22202 65078)
  (current-time-string '(22202 65078))    ; "Wed Feb 10 17:09:10 2016"
#+END_SRC

`date-to-time'会猜测字符串的格式,但结果不一定准确.

若你有一个表示从纪元开始经历了多少秒的整数,想把它转成emacs lisp中的时间对象,则可以使用 =(seconds-to-time seconds)= ,它其实是 =(float-time time)= 的反操作
#+BEGIN_SRC emacs-lisp
  (seconds-to-time (float-time (date-to-time "2016-02-10 17:09:10"))) ;(22202 65078 0 0)
#+END_SRC

* 时间相关的计算函数
+ (time-less-p t1 t2) :: t1是否早于t2
+ (time-subtract t1 t2) :: t1减t2的时间差,返回值依然是 *时间对象格式*
+ (time-add t1 t2) :: 返回t1加上t2的时间, *t1或t2应该为一个时间差*
+ (time-to-days time) :: 从公元1年至TIME开始经过了多少天
+ (time-to-day-in-year time) :: TIME从当年开始经过了多少天
+ (date-leap-year-p year) :: YEAR是否为闰年
